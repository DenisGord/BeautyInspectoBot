const TelegramBot = require('node-telegram-bot-api');
const { analyzeIngredientsOnText, splitMessage } = require('./helpers')
const Tesseract = require('tesseract.js');
const axios = require('axios');
const cheerio = require('cheerio');
require('dotenv').config()

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

//–û–±—Ä–±–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
  const { id } = msg.chat
  bot.sendMessage(id, `–ü—Ä–∏–≤–µ—Ç ${msg.from.first_name}! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞–≤–∏—é —Å–æ—Å—Ç–∞–≤–∞, –∏ —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é.`, {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "—Ç–µ–∫—Å—Ç üí¨",
            callback_data: 'text'
          },
          {
            text: "—Ñ–æ—Ç–æ üì∏",
            callback_data: 'img'
          }
        ]
      ]
    }
  })
})

bot.onText(/\/analyze_text/, (msg) => {
  const { id } = msg.chat
  bot.sendMessage(id, `–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é.`);
})

bot.onText(/\/analyze_photo/, (msg) => {
  const { id } = msg.chat
  bot.sendMessage(id, `–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Å—Ç–∞–≤–∞ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é.`);
})

bot.on('photo', async (msg) => {
  const { id } = msg.chat;
  const fileId = msg.photo[msg.photo.length - 1].file_id;

  try {
    bot.sendMessage(id, "–í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚úÖ", { parse_mode: 'Markdown' })

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
    const fileLink = await bot.getFileLink(fileId);
    const imageResponse = await axios.get(fileLink, { responseType: 'arraybuffer' });

    // –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Tesseract
    const { data: { text } } = await Tesseract.recognize(
      imageResponse.data, // –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      'rus+eng', // –Ø–∑—ã–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    );

    if (!text) {
      throw new Error('–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
    }

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é GigaChat
    const analysis = await analyzeIngredientsOnText(text);
    const messages = splitMessage(analysis);
    for (const message of messages) {
      await bot.sendMessage(id, message, { parse_mode: 'Markdown' });
    }
    // sendLongMessage(analysis, bot, id)

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    bot.sendMessage(id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–≤–µ—Ä–∏ –∫–æ–º–∞–Ω–¥

bot.on('callback_query', query => {
  const { id } = query.message.chat

  switch (query.data) {
    case 'text':
      break;
    case "img":
      break;
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const { id } = msg.chat;
  const text = msg.text;
  //–∫–æ—Å—Ç—ã–ª—å —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
  if (text && text?.[0] !== '/') {
    bot.sendMessage(id, "–í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚úÖ", { parse_mode: 'Markdown' })

    if (text.startsWith('https://goldapple.ru')) {
      const ingredients = await getProductIngredients(text);
      try {
        const analysis = await analyzeIngredientsOnText(ingredients);
        const messages = splitMessage(analysis);
        for (const message of messages) {
          await bot.sendMessage(id, message, { parse_mode: 'Markdown' });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        bot.sendMessage(id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
    try {
      const analysis = await analyzeIngredientsOnText(text);
      const messages = splitMessage(analysis);
      for (const message of messages) {
        await bot.sendMessage(id, message, { parse_mode: 'Markdown' });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      bot.sendMessage(id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

});

const getProductIngredients = async (url) => {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const { data: html } = await axios.get(url);

    // –ü–∞—Ä—Å–∏–º HTML —Å –ø–æ–º–æ—â—å—é Cheerio
    const $ = cheerio.load(html);

    // –ò—â–µ–º –±–ª–æ–∫ —Å —Å–æ—Å—Ç–∞–≤–æ–º (–ø—Ä–∏–º–µ—Ä –¥–ª—è ¬´–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ¬ª)
    const ingredients = $('[text="—Å–æ—Å—Ç–∞–≤"] > div').text() // –£—Ç–æ—á–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–æ—Å—Ç–∞–≤–∞
 
    if (!ingredients) {
      throw new Error('–°–æ—Å—Ç–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    }

    return ingredients;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞:', error);
    throw error;
  }
};

// async function addImg(file) {
//   const client = new GigaChat(GIGACHAT_API_KEY);
//   await client.createToken()

//   const response = await client.completion({
//     model: "GigaChat:latest",
//     messages: [
//       {
//         role: "user",
//         content: '–æ–ø—Ä–µ–¥–µ–ª–∏ —Å–æ—Å—Ç–∞–≤ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –æ–ø–∏—à–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã',
//         file,
//         image: file
//       }
//     ]
//   })

//   console.log(response.choices[0].message.content, 'content')
// }


console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');