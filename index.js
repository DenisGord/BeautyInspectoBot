const TelegramBot = require('node-telegram-bot-api');
const { getProductIngredients, photoAnalyze, textAnalyze } = require('./helpers')

require('dotenv').config()

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

//–û–±—Ä–±–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
  const { id } = msg.chat
  bot.sendMessage(id, `üåü *${msg.from.first_name} –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∏! *üåü
  
__–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ:__

üçè —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∑–æ–ª–æ—Ç–æ–≥–æ —è–±–ª–æ–∫–∞

üìù —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ 

üì∏ —Ñ–æ—Ç–æ–≥—Ä–∞–≤–∏—é —Å–æ—Å—Ç–∞–≤–∞, –∏ —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é.`, { parse_mode: 'Markdown' })
})

bot.onText(/\/analyze_text/, (msg) => {
  const { id } = msg.chat
  bot.sendMessage(id, `–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é.`);
})

bot.onText(/\/analyze_photo/, (msg) => {
  const { id } = msg.chat
  bot.sendMessage(id, `–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Å—Ç–∞–≤–∞ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é.`);
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const { id } = msg.chat;
  const text = msg.text;
  const photo = msg.photo
  if ((text && text[0] !== '/') || photo) {
    bot.sendMessage(id, "–í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚úÖ", { parse_mode: 'Markdown' })
    switch (true) {
      case Boolean(photo):
        photoAnalyze(msg, bot)
        break;
      case text.includes('https://goldapple.ru'):
        const findUrl = text.split(' ').find(i => i.startsWith('https://goldapple.ru'))
        const { ingredients, brand, name } = await getProductIngredients(findUrl, id, bot)
        textAnalyze(ingredients.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s,.]/g, ''), bot, id, (brand.trim() + ' ' + name.trim()).replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s,.]/g, ''))
        break;
      case text && text?.[0] !== '/':
        textAnalyze(text.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s,.]/g, ''), bot, id)
        break;
    }
  }
});




console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');